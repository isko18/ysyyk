from aiogram import types, Dispatcher
import logging
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from asgiref.sync import sync_to_async

from apps.telegram.state.cklient import ClientStates
from apps.telegram.button.cklient import client_keyboard, back_keyboard, cklient_region_keyboard, comment_keyboard
from apps.telegram.models import Business, Cklient, UserCklient
from apps.telegram.management.commands.bot_instance import bot
import json

accepted_requests = set()
declined_requests = set()
searched_requests = set()

async def edit_message_if_different(callback_query: types.CallbackQuery, new_text: str, new_reply_markup: types.InlineKeyboardMarkup):
    current_text = callback_query.message.text
    current_reply_markup = callback_query.message.reply_markup
    
    current_reply_markup_json = json.dumps(current_reply_markup.to_python() if current_reply_markup else None)
    new_reply_markup_json = json.dumps(new_reply_markup.to_python() if new_reply_markup else None)

    logging.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {current_text}\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_text}\n–¢–µ–∫—É—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {current_reply_markup_json}\n–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {new_reply_markup_json}")

    if current_text != new_text or current_reply_markup_json != new_reply_markup_json:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await callback_query.message.edit_text(new_text, reply_markup=new_reply_markup)
    else:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        
async def client_start(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ 'client_start' –ø–æ–ª—É—á–µ–Ω–∞")
    await state.finish()
    await callback_query.answer()
    await edit_message_if_different(
        callback_query,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚ò∫Ô∏è –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –∂–∏–ª—å—è. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –Ω–∞–π–¥—É –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ! üåç‚ú®\n\n",
        client_keyboard()
    )
    logging.info('–ø–µ—Ä–µ—Ö–æ–¥')

async def choose_region(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ 'choose_region' –ø–æ–ª—É—á–µ–Ω–∞")
    await ClientStates.choosing_region.set()
    await callback_query.answer()
    await edit_message_if_different(
        callback_query,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
        cklient_region_keyboard()
    )

async def region_selected(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"–†–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω: {callback_query.data}")
    region_map = {
        'city_balykchy': '–ë–∞–ª—ã–∫—á—ã',
        'city_tamchy': '–¢–∞–º—á—ã',
        'city_chok_tal': '–ß–æ–∫-–¢–∞–ª',
        'city_chon_saroi': '–ß–æ–Ω-–°–∞—Ä—ã-–û–π',
        'city_saroi': '–°–∞—Ä—ã-–û–π',
        'city_cholponata': '–ß–æ–ª–ø–æ–Ω-–ê—Ç–∞',
        'city_bosteri': '–ë–æ—Å—Ç–µ—Ä–∏',
        'city_ananeva': '–ê–Ω–∞–Ω—å–µ–≤–æ',
        'city_tup': '–¢—é–ø',
        'city_karakol': '–ö–∞—Ä–∞–∫–æ–ª',
        'city_jetiogyz': '–î–∂–µ—Ç–∏ –û–≥—É–∑',
        'city_kyzyl': '–ö—ã–∑—ã–ª –°—É—É',
        'city_tamga': '–¢–∞–º–≥–∞',
        'city_bokon': '–ë–æ–∫–æ–Ω–±–∞–µ–≤–∞'
    }
    region_text = region_map.get(callback_query.data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω')
    await state.update_data(region=callback_query.data, region_text=region_text)
    await ClientStates.entering_date.set()
    await callback_query.answer()
    await edit_message_if_different(
        callback_query,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {region_text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):",
        back_keyboard()
    )

async def date_entered(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    region = user_data.get('region')
    region_text = user_data.get('region_text')
    date = message.text

    logging.info(f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –≤–≤–µ–¥–µ–Ω–∞: {date} –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_text}")

    await state.update_data(date=date)
    await ClientStates.entering_comment.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=comment_keyboard())

async def comment_entered(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    region_text = user_data.get('region_text')
    date = user_data.get('date')
    comment = message.text

    logging.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

    await state.update_data(comment=comment)
    await ClientStates.searching.set()

    search_keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='search'),
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='choose_date')
    )
    await message.answer("–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...", reply_markup=search_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
async def search_action(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    request_id = f"{callback_query.from_user.id}_{user_data.get('region')}_{user_data.get('date')}"
    
    region = user_data.get('region')
    region_text = user_data.get('region_text')
    date = user_data.get('date')
    comment = user_data.get('comment')

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if request_id in searched_requests:
        searched_requests.remove(request_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_client = await sync_to_async(UserCklient.objects.get)(user_id=callback_query.from_user.id)
    await sync_to_async(Cklient.objects.create)(
        user=user_client,
        region=region_text,
        date=date,
        comment=comment
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç–∞–º
    business_clients = await sync_to_async(list)(Business.objects.filter(region=region, is_active=True).select_related('user'))

    if not business_clients:
        await callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ.", show_alert=True)
    else:
        for business_client in business_clients:
            unique_request_id = f"{business_client.id}_{request_id}"
            if unique_request_id not in searched_requests and unique_request_id not in declined_requests:
                accept_decline_keyboard = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'decline_{business_client.id}_{callback_query.from_user.id}'),
                    types.InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_{business_client.id}_{callback_query.from_user.id}'),
                )
                await bot.send_message(
                    business_client.user.user_id,  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª–µ user_id —É –≤–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ
                    f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n–†–µ–≥–∏–æ–Ω: {region_text}\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {date}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}",
                    reply_markup=accept_decline_keyboard
                )
                searched_requests.add(unique_request_id)
        searched_requests.add(request_id)
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç–∞–º –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.", show_alert=True)


async def handle_accept(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    business_id = int(data[1])
    client_id = int(data[2])
    request_id = f"{callback_query.from_user.id}_{business_id}"

    if request_id in accepted_requests or request_id in declined_requests:
        await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    accepted_requests.add(request_id)

    business_client = await sync_to_async(Business.objects.get)(id=business_id)

    region_map = {
        'city_balykchy': '–ë–∞–ª—ã–∫—á—ã',
        'city_tamchy': '–¢–∞–º—á—ã',
        'city_chok_tal': '–ß–æ–∫-–¢–∞–ª',
        'city_chon_saroi': '–ß–æ–Ω-–°–∞—Ä—ã-–û–π',
        'city_saroi': '–°–∞—Ä—ã-–û–π',
        'city_cholponata': '–ß–æ–ª–ø–æ–Ω-–ê—Ç–∞',
        'city_bosteri': '–ë–æ—Å—Ç–µ—Ä–∏',
        'city_ananeva': '–ê–Ω–∞–Ω—å–µ–≤–æ',
        'city_tup': '–¢—é–ø',
        'city_karakol': '–ö–∞—Ä–∞–∫–æ–ª',
        'city_jetiogyz': '–î–∂–µ—Ç–∏ –û–≥—É–∑',
        'city_kyzyl': '–ö—ã–∑—ã–ª –°—É—É',
        'city_tamga': '–¢–∞–º–≥–∞',
        'city_bokon': '–ë–æ–∫–æ–Ω–±–∞–µ–≤–∞',
        'city_baktyy':'–ë–∞–∫—Ç—É—É-–î–æ–ª–æ–Ω–æ—Ç—É',
        'city_koshkol' : '–ö–æ—à-–ö–æ–ª',
        'city_ornok' : '–û—Ä–Ω–æ–∫',
        'city_karaoi' : '–ö–∞—Ä–∞-–û–π',
        'city_chyrpykty' : '–ß—ã—Ä–ø—ã–∫—Ç—ã',
        'city_baet' : '–ë–∞–µ—Ç',
    }
    region_text = region_map.get(business_client.region, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω')

    booking_details = (
        f"–†–µ–≥–∏–æ–Ω: {region_text}\n"
        f"–ü–∞–Ω—Å–∏–æ–Ω–∞—Ç: {business_client.pansionat}\n"
        f"–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {business_client.type_accommodation}\n"
        f"–£–¥–æ–±—Å—Ç–≤–∞: {business_client.facilities}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {business_client.quantities}\n"
        f"–¶–µ–Ω–∞: {business_client.price} USD\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {business_client.phone_number}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if business_client.photos:
        photos = business_client.photos.split(',')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø—è—Ç—ã–º–∏
        media = [types.InputMediaPhoto(media=photo) for photo in photos]
        if media:
            media[0].caption = booking_details  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            await bot.send_media_group(client_id, media)
    else:
        await bot.send_message(client_id, booking_details)

    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.", show_alert=True)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback_query.message.edit_reply_markup(types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', callback_data='accepted')
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ
    search_other_region_keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('–ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ', callback_data='search_other_region')
    )
    await bot.send_message(
        client_id,
        "–ó–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ.",
        reply_markup=search_other_region_keyboard
    )

async def handle_decline(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    business_id = int(data[1])
    client_id = int(data[2])
    request_id = f"{callback_query.from_user.id}_{business_id}"

    if request_id in accepted_requests or request_id in declined_requests:
        await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    declined_requests.add(request_id)
    await callback_query.message.delete()
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)

async def search_other_region(callback_query: types.CallbackQuery, state: FSMContext):
    await choose_region(callback_query, state)

async def go_back(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ 'go_back' –ø–æ–ª—É—á–µ–Ω–∞, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    if current_state == ClientStates.entering_comment.state:
        await ClientStates.entering_date.set()
        await callback_query.answer()
        await edit_message_if_different(
            callback_query,
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):",
            back_keyboard()
        )
    elif current_state == ClientStates.entering_date.state:
        await choose_region(callback_query, state)
    else:
        await client_start(callback_query, state)

def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(client_start, Text(equals='client_start'), state='*')
    dp.register_callback_query_handler(choose_region, Text(equals='choose_region'), state='*')
    dp.register_callback_query_handler(region_selected, Text(startswith='city_'), state=ClientStates.choosing_region)
    dp.register_callback_query_handler(go_back, Text(equals='choose_date'), state='*')  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    dp.register_callback_query_handler(search_action, Text(equals='search'), state=ClientStates.searching)
    dp.register_callback_query_handler(handle_accept, Text(startswith='accept_'), state='*')
    dp.register_callback_query_handler(handle_decline, Text(startswith='decline_'), state='*')
    dp.register_callback_query_handler(search_other_region, Text(equals='search_other_region'), state='*')
    dp.register_message_handler(date_entered, state=ClientStates.entering_date)
    dp.register_message_handler(comment_entered, state=ClientStates.entering_comment)